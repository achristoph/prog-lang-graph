app = angular.module('app', [])

app.controller('GraphCtrl', ($scope) ->
  $scope.influenced_count = 20

  $scope.drawGraph = ()->
    $.getJSON "<%= asset_path('data_source.json') %>", (data) ->
      $("svg").empty()
      draw(data, $scope.influenced_count)
)

draw = (links,influenced_count)->
  nodes = {}

  links = _.filter(links, (l)-> l.count > influenced_count)
  links = _.map(links, (l)-> {source: l.source, target: l.target, count: l.count})

  linkedByIndex = {}

  links.forEach (d) ->
    linkedByIndex[d.source + "," + d.target] = 1

  is_influenced_node = (a,b)->
    return linkedByIndex[a.name+","+b.name]

  links.forEach (link)->
    if nodes[link.source]
      nodes[link.source]["chosen"]="chosen"
      nodes[link.source]["count"]= link.count
      link.source = nodes[link.source]
    else
      link.source = nodes[link.source] = {name: link.source, chosen: "chosen", count: link.count}

    link.target = nodes[link.target] || (nodes[link.target] = {name: link.target})

  width = 1000
  height = 500

  tick = () ->
    path.attr("d", linkArc)
    circle.attr("transform", transform)
    text.attr("transform", transform)

  force = d3.layout.force()
  .nodes(d3.values(nodes))
  .links(links)
  .size([width, height])
  .linkDistance(60)
  .charge(-300)
  .on("tick", tick)
  .start()

  svg = d3.select("svg")
  .attr("width", width)
  .attr("height", height)

  svg.append("defs").selectAll("marker")
  .data(["end"])
  .enter().append("marker")
  .attr("id", (d)-> return d )
  .attr("viewBox", "0 -5 10 10")
  .attr("refX", 15)
  .attr("refY", -1.5)
  .attr("markerWidth", 6)
  .attr("markerHeight", 6)
  .attr("orient", "auto")
  .append("path")
  .attr("d", "M0,-5L10,0L0,5")

  path = svg.append("g").selectAll("path")
  .data(force.links())
  .enter().append("path")
  .attr("class", "link")
  .attr("marker-end", (d) -> return "url(#end)")

  circle = svg.append("g").selectAll("circle")
  .data(force.nodes())
  .enter().append("circle")
  .attr("r", (d) ->
    if d.count
      return d.count+5
    else
      return 5
  )
  .call(force.drag)
  .attr("class", (d)->
      return " " + d.chosen)
  .on("mouseover", (d) ->
    path.style('stroke', (l)->
      if(d == l.source)
        return "red"
      else if (d == l.target)
        return "blue"
    )
    circle.classed("neighbor", (o)-> is_influenced_node(d, o))

    path.style("opacity", (l)-> if (l.source.name == d.name or l.target.name == d.name) then 1 else .1)
  )
  .on("mouseout", (d) ->
      path.style('stroke', "black")
      circle.classed("neighbor",false)
      path.style("opacity",.6)
      circle.style("opacity",1)
  )
  .on("dblclick", (d)->
      console.log d
  )

  text = svg.append("g").selectAll("text")
  .data(force.nodes())
  .enter().append("text")
  .attr("x", 8)
  .attr("y", ".31em")
  .text((d)-> return d.name)
  .style("font-size", (d)-> "#{d.count + 10}px")

  linkArc = (d) ->
    dx = d.target.x - d.source.x
    dy = d.target.y - d.source.y
    dr = Math.sqrt(dx * dx + dy * dy)
    return "M#{d.source.x},#{d.source.y}A#{dr},#{dr} 0 0,1 #{d.target.x},#{d.target.y}"

  transform = (d) ->
    return "translate(#{d.x},#{d.y})"